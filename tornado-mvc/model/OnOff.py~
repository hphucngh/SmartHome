import tornado.web
from config import Env
import time
import datetime
from bson.json_util import dumps
import json
import RPi.GPIO as GPIO

class OnOff(tornado.web.RequestHandler):
    def post(self):

        pin_lrl = 21
        pin_kll = 20
        pin_bl = 22
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(pin_lrl, GPIO.OUT)
        GPIO.setup(pin_kll, GPIO.OUT)
        GPIO.setup(pin_bl, GPIO.OUT)
        
        key = self.get_argument("key")
        value = self.get_argument("value")
        if key == "living-room-light":
            if value == "true":
                starttime = datetime.datetime.utcnow()
                GPIO.output(pin_lrl, GPIO.HIGH)
                self.write("true")
                new_status = {
                        "living-room-light" : value,
                        "data" : "on",
                        "name" : "living-room-light",
                        "starttime" : starttime,
                        "endtime": None,
                        "iddevice" : "lrl"
                }
                Env.database["statusdb"].insert(new_status)

            if value == "false":
                endtime = datetime.datetime.utcnow()
                GPIO.output(pin_lrl, GPIO.LOW)
                self.write("false")
                finds = json.loads(dumps(Env.database["statusdb"].find({"name":key},{"data":1, "_id":0}).sort([("_id", -1)]).limit(1)))[0]
                f = finds['data']
                Env.database["statusdb"].update({"name":key, "data":f},{"$set":{"endtime":endtime, "living-room-light" : value,"data":"off"}})
                
        elif key == "kitchen-light":
            if value == "true":
                starttime = datetime.datetime.utcnow()
                GPIO.output(pin_kll, GPIO.HIGH)
                self.write("true")
                new_status = {
                        "kitchen-light" : value,
                        "data" : "on",
                        "name" : "kitchen-light",
                        "starttime" : starttime,
                        "endtime":"",
                        "iddevice" : "kll"
                }
                Env.database["statusdb"].insert(new_status)

            if value == "false":
                endtime = datetime.datetime.utcnow()
                GPIO.output(pin_kll, GPIO.LOW)
                self.write("false")
                finds = json.loads(dumps(Env.database["statusdb"].find({"name":key},{"data":1, "_id":0}).sort([("_id", -1)]).limit(1)))[0]
                f = finds['data']
                Env.database["statusdb"].update({"name":key, "date":f },{"$set":{"endtime":endtime, "kitchen-light" : value, "data":"off"}})
        elif key == "bedroom-light":
            if value == "true":
                starttime = datetime.datetime.utcnow()
                GPIO.output(pin_bl, GPIO.HIGH)
                self.write("true")
                new_status = {
                        "bedroom-light" : value,
                        "data" : "on",
                        "name" : "bedroom-light",
                        "starttime" : starttime,
                        "endtime":"",
                        "iddevice" : "bl"
                }
                Env.database["statusdb"].insert(new_status)

            if value == "false":
                endtime = datetime.datetime.utcnow()
                GPIO.output(pin_bl, GPIO.LOW)
                self.write("false")
                finds = json.loads(dumps(Env.database["statusdb"].find({"name":key},{"data":1, "_id":0}).sort([("_id", -1)]).limit(1)))[0]
                f = finds['data']
                Env.database["statusdb"].update({"name":key, "data":f },{"$set":{"endtime":endtime, "bedroom-light" : value, "data":"off"}})
        elif key == "all-on":
                value = "true"
                
                # device la danh sach thiet bi, sau se nang cap bang cach truy xuat database
                device = ["living-room-light","kitchen-light","bedroom-light"]
                
                #Truy van database dong thoi chuyen thanh kieu list
                finds = json.loads(dumps(Env.database["statusdb"].find({"data":"on", "endtime":""},{"name":1, "_id":0})))
                
                new_dict = {}
                new = []
                
                #Thuc hien chuyen finds thanh kieu dict
                for item in finds:
                   name = item['name']
                   new_dict[name] = item

                #Lay cac ten thiet bi theo val ma trong val co them {'name': [ten thiet bi]} nen append vao mot list moi
                for key, val in new_dict.items():
                        new.append(val['name'])
                        
                statusDeviceOn = []
                #Neu trong list truy van trong truy van khong co thiet bi thi append ... cac thiet bi dang OFF
                for i in device:
                        if i not in new:
                                statusDeviceOn.append(i)

                starttime = datetime.datetime.utcnow()
                for devicename in statusDeviceOn:
                        if devicename == ('living-room-light'):
                               
                                GPIO.output(pin_lrl, GPIO.HIGH)
                                self.write("true")
                                new_status = {
                                        "living-room-light" : value,
                                        "data" : "on",
                                        "name" : "living-room-light",
                                        "starttime" : starttime,
                                        "endtime":"",
                                        "iddevice" : "lrl"
                                }
                                Env.database["statusdb"].insert(new_status)
                                
                                
                        elif devicename == ('kitchen-light'):
                                GPIO.output(pin_kll, GPIO.HIGH)
                                self.write("true")
                                new_status = {
                                        "kitchen-light" : value,
                                        "data" : "on",
                                        "name" : "kitchen-light",
                                        "starttime" : starttime,
                                        "endtime":"",
                                        "iddevice" : "kll"
                                }
                                Env.database["statusdb"].insert(new_status)
                                
                                
                        elif devicename == ('bedroom-light'):
                                GPIO.output(pin_bl, GPIO.HIGH)
                                self.write("true")
                                new_status = {
                                        "bedroom-light" : value,
                                        "data" : "on",
                                        "name" : "bedroom-light",
                                        "starttime" : starttime,
                                        "endtime":"",
                                        "iddevice" : "bl"
                                }
                                Env.database["statusdb"].insert(new_status)

        elif key == "all-off":
                value = "false"
                
                # device la danh sach thiet bi, sau se nang cap bang cach truy xuat database
                device = ["living-room-light","kitchen-light","bedroom-light"]
                
                #Truy van database dong thoi chuyen thanh kieu list
                finds = json.loads(dumps(Env.database["statusdb"].find({"data":"on"},{"name":1, "_id":0})))
                
                new_dict = {}
                new = []
                
                #Thuc hien chuyen finds thanh kieu dict
                for item in finds:
                   name = item['name']
                   new_dict[name] = item

                #Lay cac ten thiet bi theo val ma trong val co them {'name': [ten thiet bi]} nen append vao mot list moi
                for key, val in new_dict.items():
                        new.append(val['name'])
                        
                statusDeviceOn = []
                #Neu trong list truy van trong truy van khong co thiet bi thi append ... cac thiet bi dang OFF
                for i in device:
                        if i not in new:
                                statusDeviceOn.append(i)

                endtime = datetime.datetime.utcnow()
                for devicename in new:
                        if devicename == ('living-room-light'):
                                GPIO.output(pin_lrl, GPIO.LOW)
                                self.write("false")
                                finds = json.loads(dumps(Env.database["statusdb"].find({"name":"living-room-light"},{"data":1, "_id":0}).sort([("_id", -1)]).limit(1)))[0]
                                f = finds['data']
                                Env.database["statusdb"].update({"name":"living-room-light", "data":f },{"$set":{"endtime":endtime, "living-room-light" : value,"data":"off"}})
                                
                                
                        elif devicename == ('kitchen-light'):
                                GPIO.output(pin_kll, GPIO.LOW)
                                self.write("false")
                                finds = json.loads(dumps(Env.database["statusdb"].find({"name":"kitchen-light"},{"data":1, "_id":0}).sort([("_id", -1)]).limit(1)))[0]
                                f = finds['data']
                                Env.database["statusdb"].update({"name":"kitchen-light", "data":f },{"$set":{"endtime":endtime, "kitchen-light" : value, "data":"off"}})
                        
                                
                                
                        elif devicename == ('bedroom-light'):
                                GPIO.output(pin_bl, GPIO.LOW)
                                self.write("false")
                                finds = json.loads(dumps(Env.database["statusdb"].find({"name":"bedroom-light"},{"data":1, "_id":0}).sort([("_id", -1)]).limit(1)))[0]
                                f = finds['data']
                                Env.database["statusdb"].update({"name":"bedroom-light", "data":f },{"$set":{"endtime":endtime, "bedroom-light" : value, "data":"off"}})
                                

                
                








