import tornado.web
from config import Env
import time
import datetime
from bson.json_util import dumps
import json
import RPi.GPIO as GPIO
import threading

class AutoHumidityLand(tornado.web.RequestHandler):

	def post(self):
		global stop_thread		
		
		pinSoilSensor = 25 
		pinWater = 20 
		
		GPIO.setmode(GPIO.BCM)
        
		GPIO.setup(pinSoilSensor, GPIO.IN)
		GPIO.setup(pinWater, GPIO.OUT)
	
		key = self.get_argument("key") 
		status = self.get_argument("value")	

		def autoWaterTree():
			while (1):
				HumidityLand = GPIO.input(pinSoilSensor)
				if (HumidityLand==1):
					GPIO.output(pinWater, GPIO.HIGH)
				elif (HumidityLand == 0):
					GPIO.output(pinWater, GPIO.LOW)		
				if stop_thread:
					print "exit"
					break

		if key == "auto-humidity-land":
			if status == "on":
				stop_thread = False
				starttime = datetime.datetime.utcnow()
				threadAutoWater = threading.Thread(target=autoWaterTree)
				threadAutoWater.start()
				new_status = {
					"name" : key,
					"status" : status,
					"data":"auto device",
					"starttime" : starttime,
					"endtime": None,
					"iddevice" : "autoHumidityLand"
				}
				Env.database["statusdb"].insert(new_status)	
			if status == "off":
				stop_thread = True
				GPIO.output(pinWater, GPIO.LOW)
				endtime = datetime.datetime.utcnow()
				finds = json.loads(dumps(Env.database["statusdb"].find({"name":key},{"status":1, "_id":0}).sort([("_id", -1)]).limit(1)))[0]
				
				f = finds["status"]
				Env.database["statusdb"].update({"name":key, "status":f},{"$set":{"endtime":endtime,"status":status}})